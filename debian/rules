#!/usr/bin/make -f

DESTDIR_DS := $(shell realpath debian/libdscript1)
DESTDIR_DS_DEV := $(shell realpath debian/libdscript-dev)
DESTDIR_DS_DSI := $(shell realpath debian/dsi)

SANDBOX_DS := --install-sandbox="$(DESTDIR_DS)"
SANDBOX_DS_DEV := --install-sandbox="$(DESTDIR_DS_DEV)"
SANDBOX_DS_DSI := --install-sandbox="$(DESTDIR_DS_DSI)"

SCONS_OPTIONS :=

%:
	dh $@

override_dh_auto_clean:
	scons $(SCONS_OPTIONS) --config=force build -c
	find -type d -name "__pycache__" | xargs -- rm -rf
	rm -f config.log lastConfig.py src/config.h

override_dh_auto_configure:
	
override_dh_auto_build:
	scons $(SCONS_OPTIONS) --config=force build

override_dh_auto_test:
	
override_dh_auto_install:
	scons $(SCONS_OPTIONS) --config=cache $(SANDBOX_DS) install_runtime
	scons $(SCONS_OPTIONS) --config=cache $(SANDBOX_DS_DEV) install_develop
	scons $(SCONS_OPTIONS) --config=cache $(SANDBOX_DS_DSI) dsi
	
	# non-dev-pkg-with-shlib-symlink
	mkdir -p "$(DESTDIR_DS_DEV)"/usr/lib
	mv "$(DESTDIR_DS)"/usr/lib/libdscript.so "$(DESTDIR_DS_DEV)"/usr/lib/libdscript.so
	
	# 'arch-dependent-file-in-usr-share' does not like how DragonScript stores
	# loadable packages. we can solve this on debian only using a bit of
	# symlink magic
	cd debian/dscript ; \
	for f in `find "$(DESTDIR_DS)"/usr/share/dragonscript -name "*.so"`; do \
		f2=`echo $$f | sed -e "s@usr/share@usr/lib@"`; \
		f3=`echo $$f | sed -e "s@.*/usr/share@/usr/lib@"`; \
		mkdir -p `dirname $$f2`; \
		mv $$f $$f2; \
		ln -sf "$$f3" $$f; \
	done
	
	# ubuntu seems to dislike it if build files are still around after this point in time
	scons $(SCONS_OPTIONS) --config=cache dscript dsi -c
