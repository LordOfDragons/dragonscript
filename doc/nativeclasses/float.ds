//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                 This is a native class documentation                         //
//                                                                              //
//                  This file is used only for DoxyGen                          //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

/**
 * \brief Primitive float value.
 * 
 * Primitive values are constant and stored as value not as reference. Primitive values
 * act like objects but are not stored as true objects in memory. Primitive values own
 * special operators not available to script languages:
 * | Command | Description |
 * | ------- | ----------- |
 * | float \b = float | assign float value |
 * | float \b == float | float values are equal |
 * | float \b != float | float values are not equal |
 * | \b not float | true if float value is not 0 |
 * 
 * This is a native class. It can not be subclassed.
 * \author Roland Pl√ºss
 * \version 1.0
 * \date 2015
 */
fixed class float
	/** \name Constructors */
	/*@{*/
	/** \brief Create float. */
	func new()
	end
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/**
	 * \brief Compare float to another object.
	 * \throws EInvalidAction \em other is not of type float.
	 * \retval 0 Both float values are equal.
	 * \retval <0 This float value is less than the other float value.
	 * \retval >0 This float value is greater than the other float value.
	 */
	func int compare(Object other)
		return 0
	end
	
	/**
	 * \brief Integer is equal to another float.
	 * \returns \em true if \em other is of type float and both are equal.
	 */
	func bool equals(Object other)
		return false
	end
	
	/** \brief Hash code for use as dictionary keys. */
	func int hashCode()
		return 0
	end
	
	/** \brief String representation of float value. */
	func String toString()
		return null
	end
	/*@}*/
	
	
	
	/** \name Operators */
	/*@{*/
	/** \brief Float value is less than another float value. */
	func bool <(float other)
		return false
	end
	
	/** \brief Float value is less than another int value. */
	func bool <(int other)
		return false
	end
	
	/** \brief Float value is less than another byte value. */
	func bool <(byte other)
		return false
	end
	
	/** \brief Float value is less than or equal to another float value. */
	func bool <=(float other)
		return false
	end
	
	/** \brief Float value is less than or equal to another integer value. */
	func bool <=(int other)
		return false
	end
	
	/** \brief Float value is less than or equal to another byte value. */
	func bool <=(byte other)
		return false
	end
	
	/** \brief Float value is greater than another float value. */
	func bool >(float other)
		return false
	end
	
	/** \brief Float value is greater than another integer value. */
	func bool >(int other)
		return false
	end
	
	/** \brief Float value is greater than another byte value. */
	func bool >(byte other)
		return false
	end
	
	/** \brief Float value is greater than or equal to another float value. */
	func bool >=(float other)
		return false
	end
	
	/** \brief Float value is greater than or equal to another int value. */
	func bool >=(int other)
		return false
	end
	
	/** \brief Float value is greater than or equal to another byte value. */
	func bool >=(byte other)
		return false
	end
	
	
	
	/** \brief Float plus another float value. */
	func float +(float other)
		return 0.0
	end
	
	/** \brief Float plus another integer value. */
	func float +(int other)
		return 0.0
	end
	
	/** \brief Float plus another byte value. */
	func float +(byte other)
		return 0.0
	end
	
	/** \brief Float minus another float value. */
	func float -(float other)
		return 0.0
	end
	
	/** \brief Float minus another integer value. */
	func float -(int other)
		return 0.0
	end
	
	/** \brief Float minus another byte value. */
	func float -(byte other)
		return 0.0
	end
	
	/** \brief Float value timer another float value. */
	func float *(float other)
		return 0.0
	end
	
	/** \brief Float value timer another integer value. */
	func float *(int other)
		return 0.0
	end
	
	/** \brief Float value timer another byte value. */
	func float *(byte other)
		return 0.0
	end
	
	/**
	 * \brief Float value divided by another float value.
	 * \throws EDivisionByZero \em other is 0.
	 */
	func float /(float other)
		return 0.0
	end
	
	/**
	 * \brief Float value divided by another integer value.
	 * \throws EDivisionByZero \em other is 0.
	 */
	func float /(int other)
		return 0.0
	end
	
	/**
	 * \brief Float value divided by another byte value.
	 * \throws EDivisionByZero \em other is 0.
	 */
	func float /(byte other)
		return 0.0
	end
	
	/** \brief Set float value to float value plus another float value. */
	func float +=(float other)
		return 0.0
	end
	
	/** \brief Set float value to float value plus another integer value. */
	func float +=(int other)
		return 0.0
	end
	
	/** \brief Set float value to float value plus another byte value. */
	func float +=(byte other)
		return 0.0
	end
	
	/** \brief Set float value to float value minus another float value. */
	func float -=(float other)
		return 0.0
	end
	
	/** \brief Set float value to float value minus another integer value. */
	func float -=(int other)
		return 0.0
	end
	
	/** \brief Set float value to float value minus another byte value. */
	func float -=(byte other)
		return 0.0
	end
	
	/** \brief Set float value to float value timer another float value. */
	func float *=(float other)
		return 0.0
	end
	
	/** \brief Set float value to float value timer another integer value. */
	func float *=(int other)
		return 0.0
	end
	
	/** \brief Set float value to float value timer another byte value. */
	func float *=(byte other)
		return 0.0
	end
	
	/**
	 * \brief Set float value to float value divided by another float value.
	 * \throws EDivisionByZero \em other is 0.
	 */
	func float /=(float other)
		return 0.0
	end
	
	/**
	 * \brief Set float value to float value divided by another integer value.
	 * \throws EDivisionByZero \em other is 0.
	 */
	func float /=(int other)
		return 0.0
	end
	
	/**
	 * \brief Set float value to float value divided by another byte value.
	 * \throws EDivisionByZero \em other is 0.
	 */
	func float /=(byte other)
		return 0.0
	end
	
	
	
	/** \brief Increment float value by one. */
	func float ++()
		return 0.0
	end
	
	/** \brief Decrement float value by one. */
	func float --()
		return 0.0
	end
	
	/** \brief Negated value. */
	func float -()
		return 0.0
	end
end

/**
 * \brief Immutable float object class.
 * 
 * Wraps a primitive int value. Allows float values which can be null.
 * 
 * This is a native class. It can not be subclassed.
 */
fixed class Float
	/** \name Constructors */
	/*@{*/
	/** \brief Create float. */
	func new(float value)
	end
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/** \brief Float value. */
	func float value()
		return 0.0
	end
	
	/**
	 * \brief Float is equal to another float.
	 * \returns \em true if \em other is of type Float and both are equal.
	 */
	func bool equals(Object other)
		return false
	end
	
	/** \brief Value difference between objects. */
	func int compare(Object other)
		return 0
	end
	
	/** \brief Hash code for use as dictionary keys. */
	func int hashCode()
		return 0
	end
	
	/** \brief String representation of float value. */
	func String toString()
		return null
	end
	/*@}*/
end
