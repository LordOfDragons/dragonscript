//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
//                 This is a native class documentation                         //
//                                                                              //
//                  This file is used only for DoxyGen                          //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

namespace Introspection

/**
 * \brief Introspection class.
 * 
 * Use \code{.ds} requires Introspection \endcode in your script files to load the introspection package.
 * 
 * This is a native class.
 * \author Roland Pl√ºss
 * \version 1.0
 * \date 2015
 */
class Class
	/** \brief Class type. */
	public fixed var int CLASS = 0
	
	/** \brief Interface type. */
	public fixed var int INTERFACE = 1
	
	/** \brief Namespace type. */
	public fixed var int NAMESPACE = 2
	
	
	
	/** \name Constructors */
	/*@{*/
	/** \brief Create class introspection object from a full classname string. */
	public func new( String fullName )
	end
	
	/** \brief Create class introspection object from an existing object. */
	public func new( Object objject )
	end
	/*@}*/
	
	
	
	/** \name Management */
	/*@{*/
	/** \brief Check if type modifier flags are set. */
	public func bool isSet( int flags )
	end
	
	/**
	 * \brief Class is equal to another object.
	 * \returns \em true if \em other is of type Class and both represent the same class.
	*/
	public func bool equals( Object other )
	end
	
	/** \brief Hash code for use as dictionary keys. */
	public func int hashCode()
	end
	
	/** \brief String representation of class. */
	public func String toString()
	end
	/*@}*/
	
	
	
	/** \name Class informations */
	/*@{*/
	/** \brief Name of the class. */
	public func String getName()
	end
	
	/** \brief Full name of the class. */
	public func String getFullName()
	end
	
	/** \brief Type of the class. */
	public func int getClassType()
	end
	
	/** \brief Class type modifiers. */
	public func int getTypeModifiers()
	end
	
	/** \brief Class introspection object for the base class or null if no base class exists. */
	public func Class getBase()
	end
	
	/** \brief Class introspection object for the parent class or null if no parent class exists. */
	public func Class getParent()
	end
	
	/** \brief Check if the class is a subclass of the given class. */
	public func bool isSubClassOf( Class aclass )
	end
	/*@}*/
	
	
	
	/** \name Interfaces */
	/*@{*/
	/** \brief Number of interfaces for this class. */
	public func int getInterfaceCount()
	end
	
	/**
	 * \brief Interface of this class at index.
	 * \throws EOutOfBoundary \em index is less than 0 or greaten than or equal to getInterfaceCount().
	 */
	public func Class getInterface( int index )
	end
	/*@}*/
	
	
	
	/** \name Inner Classes */
	/*@{*/
	/** \brief Number of inner classes for this class. */
	public func int getClassCount()
	end
	
	/**
	 * \brief Inner class of this class at index.
	 * \throws EOutOfBoundary \em index is less than 0 or greaten than or equal to getClassCount().
	 */
	public func Class getClass( int index )
	end
	/*@}*/
	
	
	
	/** \name Variables */
	/*@{*/
	/** \brief Number of variables in the class. */
	public func int getVariableCount()
	end
	
	/**
	 * \brief Bariable at index.
	 * \throws EOutOfBoundary \em index is less than 0 or greaten than or equal to getVariableCount().
	 */
	public func Variable getVariable( int index )
	end
	
	/**
	 * \brief Named variable.
	 * \throws EInvalidParam No variable with \em name found.
	 */
	public func Variable getVariable( String name )
	end
	/*@}*/
	
	
	
	/** \name Functions */
	/*@{*/
	/** \brief Number of functions in the class. */
	public func int getFunctionCount()
	end
	
	/**
	 * \brief Function at index.
	 * \throws EOutOfBoundary \em index is less than 0 or greaten than or equal to getFunctionCount().
	 */
	public func Function getFunction( int index )
	end
	
	/**
	 * \brief Function with name and signature.
	 * \param signature Array of Class objects.
	 * \throws EInvalidParam No matching function found.
	 */
	public func Function getFunction( String name, Array signature )
	end
	
	/**
	 * \brief Function with name and signature.
	 * \details Function is searched in all available functions, including herited ones.
	 * \param signature Array of Class objects.
	 * \throws EInvalidParam No matching function found.
	 */
	public func Function findFunction( String name, Array signature )
	end
	/*@}*/
end
